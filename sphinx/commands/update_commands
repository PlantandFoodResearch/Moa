#!/usr/bin/env python
import cStringIO
import os
import sys

import pkg_resources
from jinja2 import Template as jTemplate

import moa.args
import moa.job
import moa.logger
import moa.plugin
from moa.sysConf import sysConf


l = moa.logger.getLogger(__name__)
l.setLevel(moa.logger.DEBUG)
#moa.logger.setLevel(moa.logger.DEBUG)

parser, commandparser = moa.args.getParser()

#sysConf.initialize() -> Command definitions

sysConf.pluginHandler = moa.plugin.PluginHandler(sysConf.plugins.system)

# create a dummy job to make sure the job/plugin commands are available
# as well
testJob = moa.job.newTestJob('simple')

#initialize jinja template
templateString = pkg_resources.resource_string(
    'moa', 'data/jinja2/command.snippet.rst.jinja2')
template = jTemplate(templateString)

if os.path.exists('commands.header'):
    command_index_header = open('commands.header').read()
else: command_index_header = ""

if os.path.exists('commands.footer'):
    command_index_footer = open('commands.footer').read()
else: command_index_footer = ""

F = open('index.rst', 'w')

F.write(command_index_header)

allCommands = {}

#for s in sysConf:
#    print s

for command in sysConf.commands:
    l.info("processing command %s" % command)

    fi = sysConf.commands[command]
    func =fi['call']

    cp = fi['cp'] # argparse object

    #capture usage by temporary redirecting stdout
    tmpstdout = sys.stdout
    sys.stdout=cStringIO.StringIO()
    cp.print_help()
    sys.stdout.seek(0)
    helptext = sys.stdout.read()
    sys.stdout = tmpstdout
    l.debug("func call %s" %  func)
    #extract a longer description from the function docs
    for f in fi:
        print f, str(fi[f])[:40]
    td = {
        'name' : command,
        'helptext' : helptext,
        'label' : 'command_moa_%s' % command,
        'needsJob' : fi.get('needsJob', True),
        'log' : fi.get('log', True)
          }
    allCommands[command] = td

allComkeys = sorted(sysConf.commands.keys())

for k in allComkeys:
    dt = allCommands[k]
    F.write(template.render(dt))

F.write(command_index_footer)


F.close()
